import groovy.json.JsonOutput

def do_test = false

pipeline {
    agent {
        label 'run-unittest'
    }

    options {
        //timeout(time: 10, unit: 'MINUTES')
        timeout(time: 10, unit: 'SECONDS')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    message = "An unit test has been triggered on ${env.BUILD_URL}"
                    review_data = JsonOutput.toJson([message: message])
                    writeFile file: "data.json", text: review_data
                    sh "cat data.json| ssh mysoyul.park@${env.GERRIT_HOST} gerrit review ${env.GERRIT_CHANGE_NUMBER},${env.GERRIT_PATCHSET_NUMBER} --json"
                    echo "Remove 'module' directory"
                    sh "sudo rm -rf module"
                    currentBuild.description = "<li>${env.GERRIT_PROJECT}</li><li>${env.GERRIT_CHANGE_NUMBER},${env.GERRIT_PATCHSET_NUMBER}</li><li>${env.GERRIT_EVENT_ACCOUNT_NAME}</li>"
                }
            }
        }
        stage('Checkout a change') {
            steps {
                script {
                    echo "Checkout a change from Gerrit"
                    sh "git clone ssh://${env.GERRIT_HOST}/${env.GERRIT_PROJECT} module 2>&1"
                    sh "cd module && git fetch origin ${env.GERRIT_REFSPEC} && git checkout FETCH_HEAD"
                    if (fileExists("module/run-test.sh") && fileExists("module/docker-compose.yml")) {
                        do_test = true
                    }
                }
            }
        }
        stage('Trigger Unit Test') {
            when {
                expression { return do_test }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'lge_ad', passwordVariable: 'LGE_AD_PASSWORD', usernameVariable: 'LGE_AD_USERNAME')]){
                        def comment_base64 = env.GERRIT_EVENT_COMMENT_TEXT
                        def comment = new String(comment_base64.decodeBase64())
                        def parameter_pattern = ~/parameter:.*/
                        def parameters_in_comments = ( comment =~ parameter_pattern).findAll()
                        def test_parameters = ""
                        if ( parameters_in_comments.size() > 0 ) {
                            test_parameters = "/tools/run-test.sh "
                            for ( String param_line : parameters_in_comments ) {
                                def param = param_line.replaceAll("parameter:", "")
                                test_parameters = "$test_parameters $param"
                            }
                        }
                        sh "docker login -u ${LGE_AD_USERNAME} -p ${LGE_AD_PASSWORD} ${LGE_DOCKER_REGISTRY_HOST}"
                        sh "cd module && docker-compose pull"
                        sh "cd module && docker-compose run run-test ${test_parameters} 2>&1"
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def review_message = ""
                def verified = "0"
                if (do_test) {
                    review_message = "Success: Unit Test on ${env.BUILD_URL}"
                    verified = "1"
                } else {
                    review_message = "Your change doesn't have run-test.sh and docker-compose.yml files on the root. So you can't use Unit test enviroments"
                }
                review_data = JsonOutput.toJson([message: review_message, labels: [Verified: verified]])
                writeFile file: "data.json", text: review_data
                sh "cat data.json | ssh mysoyul.park@${env.GERRIT_HOST} gerrit review ${env.GERRIT_CHANGE_NUMBER},${env.GERRIT_PATCHSET_NUMBER} --json"
            }
        }
        failure {
            script {
                def review_message = "Failure: Unit test on ${env.BUILD_URL}"
                def verified = "-1"
                review_data = JsonOutput.toJson([message: review_message, labels: [Verified: verified]])
                writeFile file: "data.json", text: review_data
                sh "cat data.json | ssh mysoyul.park@${env.GERRIT_HOST} gerrit review ${env.GERRIT_CHANGE_NUMBER},${env.GERRIT_PATCHSET_NUMBER} --json"
            }
        }
        aborted {
            script {
                def review_message = "Aborted: Unit test on ${env.BUILD_URL} by Timeout or Administrator"
                def verified = "-1"
                review_data = JsonOutput.toJson([message: review_message, labels: [Verified: verified]])
                writeFile file: "data.json", text: review_data
                sh "cat data.json | ssh mysoyul.park@${env.GERRIT_HOST} gerrit review ${env.GERRIT_CHANGE_NUMBER},${env.GERRIT_PATCHSET_NUMBER} --json"
            }
        }
        always {
            script {
                def archive_web_root = "http://webos-ci.lge.com/download/others"
                def archive_root = "/binary/build_results/others"
                def archive_dir = "${env.JOB_NAME}".replaceAll(" ", "_")
                def archive_target_dir = "${archive_root}/${archive_dir}/${env.BUILD_NUMBER}"
                def archive_target_root = "${archive_root}/${archive_dir}"
                def archive_web_link = "${archive_web_root}/${archive_dir}/${env.BUILD_NUMBER}"
                def zip_target_dir = "module/artifacts"
                def zip_archived_file = "module/artifacts.zip"
                if (fileExists( zip_target_dir)) {
                    echo "INFO: Zip /work/artifacts directory into /work/artifacts.zip"
                    zip zipFile: zip_archived_file, archive: false, dir: zip_target_dir
                    def returned_size = sh returnStdout: true, script: "stat -c %s ${zip_archived_file}"
                    def returned_size_int = Integer.valueOf(returned_size.split("\n")[0])
                    def max_size_in_bytes = 10485760 // 10 MB in Binary
                    if ( max_size_in_bytes < returned_size_int ) {
                        echo "WARNING: ${zip_archived_file}'s size in bytes is ${returned_size_int} and greater than ${max_size_in_bytes}"
                        echo "WARNING: So this file can't be copied to a file server"
                        sh script: "rm -rfv ${zip_archived_file}"
                    } else {
                        echo "INFO: ${zip_archived_file}'s size in bytes is ${returned_size_int} and copied to a file server"
                        sh script: "mkdir -p ${archive_target_dir}"
                        sh script: "cp -v ${zip_archived_file} ${archive_target_dir}/"
                        currentBuild.description = "${currentBuild.description}<li><a href=\"${archive_web_link}\">Archives</a></li>"
                    }
                } else {
                    echo "INFO: /work/artifacts doesn't exist"
                }
                echo "INFO: Remove artifacts.zip that were created before 7 days"
                sh script: "find ${archive_target_root} -maxdepth 1 -mtime +7 -type d -regex \".*/[0-9.]+\$\" -exec rm -rfv {} ';'"
            }
        }
    }
}
