pipeline {
    agent {
        label "${env.AGENT_NAME}"
    }
   
    environment {
        BUILD_TIME_STR="TIME: %e %S %U %P %c %w %R %F %M %x %C"
        BUILD_DIR  = "build"
        SCRIPT_DIR =  "scripts"
        DOCKER_BASE_IMAGE = "arion.lge.com:5000/lgewebosbuild/webosbuild_14.04"
        DOCKER_CON_NAME = "ubuntu-1404"
        DOCKER_CON_IP = null
        LXC_CON_NAME = "ubuntu-1404"
        LXC_CON_IP = null
        BUILD_BRANCH_DEFAULT = "@gld4tv"
        BUILD_IMAGES_DEFAULT = "starfish-atsc-flash starfish-atsc-flash-devel starfish-atsc-nfs starfish-atsc-nfs-devel starfish-atsc-secured starfish-arib-flash starfish-arib-flash-devel starfish-arib-nfs starfish-arib-nfs-devel starfish-arib-secured starfish-dvb-flash starfish-dvb-flash-devel starfish-dvb-nfs starfish-dvb-nfs-devel starfish-dvb-secured"
        BUILD_MACHINE_DEFAULT = "o18"
        BUILD_NUMBER_DEFAULT  = "104"
        CHECK_MACHINE = "NO"
        BUILD_SCRIPT_FILE = "run_build.sh"
        USE_PREMIRROR_DEFAULT = "Y"
        USE_SSTATEMIRROR_DEFAULT = "N"
        PREMIRROR_PATH = ""
        SSTATEMIRROR_PATH = ""
    } 

    stages {
        stage('Prepare') {
            steps {
                script {
                    /**
                     *   Get Container IP
                     */
                    echo "INFO: Build type = ${env.BUILD_TYPE}"
                    if (env.BUILD_TYPE == "lxc") {
                        LXC_CON_INFO = sh returnStdout: true, script: "sudo lxc-info -n ${LXC_CON_NAME}"
                        LXC_CON_IP = LXC_CON_INFO.replaceAll(" ", "").split("\n").findAll{ it.contains 'IP:'}[0].replaceAll("IP:", "")
                        echo "INFO: LXC Container Information = \n${LXC_CON_NAME}\n"
                    }
                    else if (env.BUILD_TYPE == "docker") {
                        echo "INFO: Docker Container Name = ${DOCKER_CON_NAME}"
                    }
                    /**
                     * Prepare variables for a build job
                     */
                    BUILD_BRANCH = "${env.BUILD_BRANCH == null ? BUILD_BRANCH_DEFAULT : env.BUILD_BRANCH}"
                    BUILD_IMAGES = "${env.BUILD_IMAGES == null ? BUILD_IMAGES_DEFAULT : env.BUILD_IMAGES}"
                    BUILD_MACHINE = "${env.BUILD_MACHINE == null ? BUILD_MACHINE_DEFAULT : env.BUILD_MACHINE}"
                    BUILD_NUMBER = "${env.BUILD_NUMBER_TARGET == null ? BUILD_MACHINE_DEFAULT : env.BUILD_NUMBER_TARGET}"
                    USE_PREMIRROR = "${env.USE_PREMIRROR == null ? USE_PREMIRROR_DEFAULT : env.USE_PREMIRROR}"
                    USE_SSTATEMIRROR = "${env.USE_SSTATEMIRROR == null ? USE_SSTATEMIRROR_DEFAULT : env.USE_SSTATEMIRROR}"
                    if (USE_PREMIRROR == "Y" ) {
                        if (BUILD_BRANCH == "@gld4tv" ) {
                            PREMIRROR_PATH = "--premirror=file:///starfish/starfish/gld/downloads"
                        } else if (BUILD_BRANCH == "@drd4tv" ) {
                            PREMIRROR_PATH = "--premirror=file:///starfish/starfish/dreadlocks/downloads"
                        } else {
                            PREMIRROR_PATH = "--premirror=file:///starfish/starfish/gld/downloads"
                        }
                    } else {
                        PREMIRROR_PATH = " "
                    }
                    if (USE_SSTATEMIRROR == "Y" ) {
                        if (BUILD_BRANCH == "@gld4tv" ) {
                            SSTATEMIRROR_PATH = "--sstatemirror=file:///starfish/starfish/gld/sstate-cache"
                        } else if (BUILD_BRANCH == "@drd4tv" ) {
                            SSTATEMIRROR_PATH = "--sstatemirror=file:///starfish/starfish/dreadlocks/sstate-cache"
                        } else {
                            SSTATEMIRROR_PATH = "--sstatemirror=file:///starfish/starfish/gld/sstate-cache"
                        }
                    } else {
                        SSTATEMIRROR_PATH = " "
                    }
                    BUILD_SCRIPT = """#!/bin/bash
export BUILD_NUMBER=${BUILD_NUMBER}
pushd ${env.WORKSPACE}
/usr/bin/time sudo rm -rf build-starfish
git clone -b ${BUILD_BRANCH} ssh://wall.lge.com/starfish/build-starfish
pushd build-starfish
./mcf -b 0 -p 0 ${BUILD_MACHINE} ${PREMIRROR_PATH} ${SSTATEMIRROR_PATH}
. oe-init-build-env
/usr/bin/time -f "${BUILD_TIME_STR}" scripts/build.sh --machines=${BUILD_MACHINE} --images=${BUILD_IMAGES} --targets=  --bom --signatures --site=hq --jenkins=cerberus --job=official
"""
                    /**
                     * Print other information
                     */
                    echo "INFO: Build Script  = \n${BUILD_SCRIPT}"
                    echo "INFO: Build Branch  = ${BUILD_BRANCH}"
                    echo "INFO: Build Machine = ${BUILD_MACHINE}"
                    echo "INFO: Build Images  = ${BUILD_IMAGES}"
                    currentBuild.description  = env.AGENT_NAME + ", "+env.BUILD_TYPE
                }
            }
        }
        stage('Build'){
            steps {
                script {
                    sh "echo '${BUILD_SCRIPT}' > ${BUILD_SCRIPT_FILE} && chmod +x ${BUILD_SCRIPT_FILE}"
                    if (env.BUILD_TYPE == "real") {
                        sh "./${BUILD_SCRIPT_FILE}"
                    } else if (env.BUILD_TYPE == "lxc"){
                        //sh "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${LXC_CON_IP} /bin/bash -c "${env.WORKSPACE}/${BUILD_SCRIPT_FILE}" "
                        sh """
                        sudo lxc-attach -n ${LXC_CON_NAME} -- sudo -u gatekeeper.tvsw sh -c "cd ${env.WORKSPACE} && ./${BUILD_SCRIPT_FILE}"
                        """
                    } else if (env.BUILD_TYPE == "docker"){
                        sh """
                        docker pull ${DOCKER_BASE_IMAGE} && \
                        docker run --rm=true --privileged=true --name=testbuild_${env.BUILD_NUMBER} -w ${env.WORKSPACE} -u gatekeeper.tvsw -v /starfish:/starfish -v /binary:/binary -v /home/work/gatekeeper.tvsw:/home/work/gatekeeper.tvsw -v /vol/users/gatekeeper.tvsw:/vol/users/gatekeeper.tvsw --cap-add=SYS_RAWIO --cap-add=SYS_SYSADMIN --cap-add=SYS_SYSRESOURCE ${DOCKER_BASE_IMAGE} ./${BUILD_SCRIPT_FILE}
                        """
                    }
                }
            }
        }
    }
}
